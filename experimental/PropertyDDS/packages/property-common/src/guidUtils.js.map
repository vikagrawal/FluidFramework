{"version":3,"file":"guidUtils.js","sourceRoot":"","sources":["guidUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\n/* eslint-disable no-bitwise */\n\n/**\n * @fileoverview Utility functions related to handling GUIDs\n */\n\nimport base64js from \"base64-js\";\nimport { generateRandomUInt32Array } from \"../platform-dependent\";\nconst UINT_32HASH_PRIME = 16777619;\n\n/**\n * Fast high quality 32 bit RNG for consistent guid.\n *\n * Good \"randomness\" (distribution); Period is approximately equal to  3.11*10^37\n * Implementation was take from \"Numerical recipes. The Art of Scientific Computing.\", 3rd edition.\n * Page 357, algorithm name: Ranlim32\n *\n */\nconst guidRNG = {\n    u: 0,\n    v: 0,\n    w1: 0,\n    w2: 0,\n    isInitialized: false,\n\n    /**\n     * Initialize RNG.\n     * This function need to be called once, before the first guid gets created.\n     *\n     * @param in_seed - Optional 32-bit seed for guid RNG;\n     *                           If no seed is given, a combination of system's\n     *                           local time and Math.random() is used.\n     * @param in_enforceReInitialization - Optionally enforce re-initialization with another seed\n     *\n     * @returns  The seed used to initialize the RNG;\n     *          If re-initialization is not enforced,\n     *          a zero indicates that the RNG was not re-seeded.\n     * @alias property-common.initializeGUIDGenerator\n     */\n    initialize(in_seed?: number, in_enforceReInitialization: boolean = false): number {\n        // Quit if the RNG has already been initialized and we do not\n        // want to enforce a re-initialization with a new seed\n        if (this.isInitialized && !in_enforceReInitialization) {\n            return 0;\n        } else {\n            this.isInitialized = true;\n\n            if (in_seed === undefined) {\n                const randomValues = generateRandomUInt32Array(4);\n                this.u = randomValues[0];\n                this.v = randomValues[1];\n                this.w1 = randomValues[2];\n                this.w2 = randomValues[3];\n            } else {\n                this.v = 224461437;\n                this.w1 = 521288629;\n                this.w2 = 362436069;\n\n                this.u = in_seed ^ this.v;\n                this.genRandUInt32();\n                this.v = this.u;\n                this.genRandUInt32();\n            }\n            return -1;\n        }\n    },\n\n    /**\n     * @returns 32-bit random number based on the RNGs internal state\n     */\n    genRandUInt32(): number {\n        this.u = multiply_uint32(this.u, 2891336453) + 1640531513;\n        this.v ^= this.v >>> 13;\n        this.v ^= this.v << 17;\n        this.v = ((this.v >>> 5) ^ this.v) >>> 0;\n\n        this.w1 = multiply_uint32(33378, (this.w1 & 0xffff)) + (this.w1 >>> 16);\n        this.w2 = multiply_uint32(57225, (this.w2 & 0xffff)) + (this.w2 >>> 16);\n\n        let x = this.u ^ (this.u << 9);\n        x ^= x >>> 17;\n        x ^= x << 6;\n\n        let y = this.w1 ^ (this.w1 << 17);\n        y ^= y >>> 15;\n        y ^= y << 5;\n        return (((x >>> 0) + this.v) ^ ((y >>> 0) + this.w2)) >>> 0;\n    },\n};\n\n/**\n * Check if guid is base64 based on the length\n * The length of base16 guid is 36, base64 - 22\n *\n * @param guid - Input guid\n * @returns True if guid is base64\n */\nconst isBase64 = (guid: string): boolean => guid.length === 22;\n\n/**\n * Allows for 32-bit integer multiplication with C-like semantics\n *\n * @param a - unsigned int32 value\n * @param b - unsigned int32 value\n * @returns - result of unsigned integer multiplication\n */\nfunction multiply_uint32(a: number, b: number): number {\n    let n = a;\n    let m = b;\n\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    return (((n - nlo) * m >>> 0) + (nlo * m)) >>> 0;\n}\n\n/**\n * Helper function to convert base64 encoding to url friendly format\n *\n * @param base64 - Base64 string\n *\n * @returns Url-friendly base64 encoding.\n */\nconst toUrlBase64 = (base64: string): string => base64.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").split(\"=\")[0];\n\n/**\n * Helper function to recover padding of base64 encoding\n *\n * @param x - Base64 string\n *\n * @returns Padded base64 encoding.\n */\nconst toPaddedBase64 = function(x: string): string {\n    let base64 = x;\n    const padLength = 4 - base64.length % 4;\n    base64 += \"=\".repeat(padLength);\n    return base64;\n};\n\n/**\n * Helper function to create a guid string from an array with 32Bit values\n *\n * @param in_guidArray - Array with the 32 bit values\n * @param base64 - Use base64 encoding instead of standart guids\n *\n * @returns The guid\n */\nconst uint32x4ToGUID = function(in_guidArray: Uint32Array | Int32Array | number[], base64: boolean = false): string {\n    if (base64) {\n        const intArray = new Uint32Array(in_guidArray);\n        const byteArray = new Uint8Array(intArray.buffer);\n        const base64guid = base64js.fromByteArray(byteArray);\n        // return url-friendly base64\n        return toUrlBase64(base64guid);\n    } else {\n        // Convert to hexadecimal string\n        let str = \"\";\n        for (let i = 0; i < 4; i++) {\n            const hex = in_guidArray[i].toString(16);\n            str += (\"0\".repeat(8 - hex.length) + hex);\n        }\n        // eslint-disable-next-line max-len\n        return `${str.substr(0, 8)}-${str.substr(8, 4)}-${str.substr(12, 4)}-${str.substr(16, 4)}-${str.substr(20, 12)}`;\n    }\n};\n\n/**\n * Convert guid to four 32Bit values.\n *\n * @param in_guid - The guid to convert\n * @param io_result - An optional array to write the result to;\n *                                If no array is given, a new one gets created\n * @returns Four 32-bit values\n *\n */\nconst guidToUint32x4 = function(in_guid: string, result: Uint32Array = new Uint32Array(4)): Uint32Array {\n    if (isBase64(in_guid)) {\n        const guid = toPaddedBase64(in_guid);\n        const bytes = base64js.toByteArray(guid);\n        const intArray = new Uint32Array(bytes.buffer);\n        result.set(intArray);\n    } else {\n        result[0] = parseInt(`0x${in_guid.substr(0, 8)}`, 16);\n        result[1] = parseInt(`0x${in_guid.substr(9, 4)}${in_guid.substr(14, 4)}`, 16);\n        result[2] = parseInt(`0x${in_guid.substr(19, 4)}${in_guid.substr(24, 4)}`, 16);\n        result[3] = parseInt(`0x${in_guid.substr(28, 8)}`, 16);\n    }\n    return result;\n};\n\n/**\n * Convert base64 guid into base16.\n *\n * @param in_guid - Base64 guid to convert\n * @returns Base16 guid\n *\n */\nconst base64Tobase16 = (in_guid: string) => uint32x4ToGUID(guidToUint32x4(in_guid));\n\n/**\n * Convert base16 into base64 guid.\n *\n * @param in_guid - Base16 guid to convert\n * @returns Base64 guid\n *\n */\nconst base16ToBase64 = (in_guid: string) => uint32x4ToGUID(guidToUint32x4(in_guid), true);\n\n/**\n * Based on the boolean parameter generate either\n * a 128 bit base16 guid with the following format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx\n * or url-friendly base64 string guid of length 22\n *\n * This function is *not* thread safe!\n *\n * @param base64 - Use base64 encoding instead of standart guids\n *\n * @returns The guid\n */\nconst generateGUID = function(base64 = false): string {\n    const rnds = new Uint32Array(4);\n\n    // Random numbers for guid (4x32 bit)\n    rnds[0] = guidRNG.genRandUInt32();\n    rnds[1] = guidRNG.genRandUInt32();\n    rnds[2] = guidRNG.genRandUInt32();\n    rnds[3] = guidRNG.genRandUInt32();\n    return uint32x4ToGUID(rnds, base64);\n};\n\n// The last character is checked this way because last 4 bits of 22nd character are ignored\n// by decoder, e.g. \"+Q\" and \"+Z\" result in the same decoding.\n// The only characters with last 4 bits set to 0 are A, Q, g, w.\nconst reBase64 = (/^[\\w-]{21}[AQgw]$/);\n// eslint-disable-next-line unicorn/no-unsafe-regex\nconst reBase16 = (/^[\\dA-Fa-f]{8}(?:-[\\dA-Fa-f]{4}){3}-[\\dA-Fa-f]{12}$/);\n\n/**\n * Routine used to check whether the given string is a valid guid\n *\n * @param in_guid - The guid to test.\n * @returns True if the parameter is a valid guid, false otherwise.\n */\nconst isGUID = (in_guid: string) => reBase16.test(in_guid) || reBase64.test(in_guid);\n\n/**\n * Performs a hash combination operation on the two supplied Uint32 arrays of length 4 (using\n * a variant of the algorithm from boost::hash_combine\n *\n * @param in_array1 - First array\n * @param in_array2 - Second array\n * @returns New combined hash\n */\nconst hashCombine4xUint32 = function(\n    in_array1: Uint32Array,\n    in_array2: Uint32Array,\n    io_result?: Uint32Array,\n): Uint32Array {\n    let accumulated = io_result;\n    if (accumulated === undefined) {\n        accumulated = new Uint32Array(in_array2);\n    } else {\n        accumulated[0] = in_array2[0];\n        accumulated[1] = in_array2[1];\n        accumulated[2] = in_array2[2];\n        accumulated[3] = in_array2[3];\n    }\n\n    accumulated[0] += 0x9e3779b9;\n    accumulated[1] += 0x638f227;\n    accumulated[2] += 0x1aff2bad;\n    accumulated[3] += 0x3a8f05c5;\n\n    accumulated[0] += in_array1[3] << 6;\n    accumulated[1] += in_array1[0] << 6;\n    accumulated[2] += in_array1[1] << 6;\n    accumulated[3] += in_array1[2] << 6;\n\n    accumulated[0] += in_array1[2] >> 2;\n    accumulated[1] += in_array1[3] >> 2;\n    accumulated[2] += in_array1[0] >> 2;\n    accumulated[3] += in_array1[1] >> 2;\n\n    accumulated[0] = ((accumulated[0] ^ in_array1[1]) * UINT_32HASH_PRIME) >>> 0;\n    accumulated[1] = ((accumulated[1] ^ in_array1[2]) * UINT_32HASH_PRIME) >>> 0;\n    accumulated[2] = ((accumulated[2] ^ in_array1[3]) * UINT_32HASH_PRIME) >>> 0;\n    accumulated[3] = ((accumulated[3] ^ in_array1[0]) * UINT_32HASH_PRIME) >>> 0;\n\n    return accumulated;\n};\n\n/**\n * Takes two guids and generates a new derived guid.\n * Note: You should only use this helper function when you need only one combination.\n *       Otherwise, it is more efficient to work on the uint8 arrays directly.\n *\n * @param in_guid1 - Input guid\n * @param in_guid2 - Input guid\n * @param base64 - Use base64 encoding instead of standart guids\n * @returns Combined guid\n */\nconst combineGuids = function(in_guid1: string, in_guid2: string, base64 = false): string {\n    const firstArray = guidToUint32x4(in_guid1);\n    const secondArray = guidToUint32x4(in_guid2);\n    const combined = hashCombine4xUint32(firstArray, secondArray);\n    return uint32x4ToGUID(combined, base64);\n};\n\n// Make sure the RNG is initialized\nguidRNG.initialize();\n\nconst initializeGUIDGenerator = (...args) => { guidRNG.initialize(...args); };\n\nexport const GuidUtils = {\n    uint32x4ToGUID,\n    guidToUint32x4,\n    base64Tobase16,\n    base16ToBase64,\n    initializeGUIDGenerator,\n    generateGUID,\n    isGUID,\n    combineGuids,\n    hashCombine4xUint32,\n};\n"]}